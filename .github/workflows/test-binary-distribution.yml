name: Test Binary Distribution

on:
  workflow_dispatch:
    inputs:
      tarball_url:
        description: 'URL to tarball for testing'
        required: true
        type: string
      test_installation:
        description: 'Test full installation process'
        required: false
        default: false
        type: boolean
      test_commit_match:
        description: 'Test that commit matches VM addons'
        required: false
        default: true
        type: boolean

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  test-distribution:
    name: Test Binary Distribution
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set environment
      run: |
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
        # Extract architecture from URL
        if [[ "${{ github.event.inputs.tarball_url }}" == *"arm64"* ]]; then
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.tarball_url }}" == *"x86_64"* ]]; then
          echo "TARGET_ARCH=x86_64" >> $GITHUB_ENV
        else
          echo "TARGET_ARCH=unknown" >> $GITHUB_ENV
        fi
        
        # Set test prefix
        echo "TEST_PREFIX=/tmp/qemu-3dfx-binary-test" >> $GITHUB_ENV
        
    - name: Download tarball
      run: |
        echo "üì• Downloading tarball from: ${{ github.event.inputs.tarball_url }}"
        
        wget -O test-tarball.tar.zst "${{ github.event.inputs.tarball_url }}"
        
        # Download checksum if available
        wget -O test-tarball.tar.zst.sha256 "${{ github.event.inputs.tarball_url }}.sha256" || {
          echo "‚ö†Ô∏è No checksum file available"
        }
        
        ls -la test-tarball.*
        
    - name: Verify tarball
      run: |
        # Check file type
        file test-tarball.tar.zst
        
        # Verify checksum if available
        if [ -f "test-tarball.tar.zst.sha256" ]; then
          echo "üîç Verifying checksum..."
          shasum -a 256 -c test-tarball.tar.zst.sha256
          echo "‚úÖ Checksum verification passed"
        else
          echo "‚ö†Ô∏è Skipping checksum verification (no .sha256 file)"
        fi
        
        # Test that we can list the contents
        echo "üìã Tarball contents:"
        tar --zstd -tf test-tarball.tar.zst | head -20
        
    - name: Setup test environment
      run: |
        # Create isolated test environment
        mkdir -p "${TEST_PREFIX}"
        
        # If testing full installation, we need to simulate Homebrew structure
        if [ "${{ github.event.inputs.test_installation }}" = "true" ]; then
          mkdir -p "${TEST_PREFIX}/opt/homebrew/bin"
          mkdir -p "${TEST_PREFIX}/opt/homebrew/lib"
          mkdir -p "${TEST_PREFIX}/opt/homebrew/sign"
        fi
        
    - name: Extract tarball
      run: |
        echo "üì¶ Extracting tarball..."
        
        if [ "${{ github.event.inputs.test_installation }}" = "true" ]; then
          # Extract to test Homebrew structure
          tar --zstd -xf test-tarball.tar.zst -C "${TEST_PREFIX}"
        else
          # Extract to temporary location for examination
          tar --zstd -xf test-tarball.tar.zst -C "${TEST_PREFIX}"
        fi
        
        echo "‚úÖ Extraction completed"
        
        # Show what was extracted
        echo "üìÅ Extracted files:"
        find "${TEST_PREFIX}" -type f | head -20
        
    - name: Examine distribution structure
      run: |
        echo "=== Distribution Structure Analysis ==="
        
        # Show the full extracted structure first
        echo "üìÅ Full extraction structure:"
        find "${TEST_PREFIX}" -type d | head -20
        echo ""
        
        # Find the main directory (could be either qemu-3dfx-* or opt/homebrew)
        MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1)
        
        if [ -z "$MAIN_DIR" ]; then
          echo "‚ùå No qemu-3dfx directory found"
          echo "Looking for opt/homebrew structure instead..."
          
          # Check if we have opt/homebrew structure (Homebrew-style tarball)
          if [ -d "${TEST_PREFIX}/opt/homebrew" ]; then
            MAIN_DIR="${TEST_PREFIX}/opt/homebrew"
            echo "üìÅ Found Homebrew structure: $MAIN_DIR"
          else
            echo "‚ùå No recognizable structure found"
            find "${TEST_PREFIX}" -type d
            exit 1
          fi
        else
          echo "üìÅ Main directory: $MAIN_DIR"
        fi
        
        echo "=== Directory Contents ==="
        ls -la "$MAIN_DIR"
        
        # Detect the actual structure and find binaries
        echo "=== Binaries ==="
        BIN_DIRS=(
          "$MAIN_DIR/bin"
          "$MAIN_DIR/opt/homebrew/bin"
          "$MAIN_DIR"
        )
        
        FOUND_BINARIES=false
        for bin_dir in "${BIN_DIRS[@]}"; do
          if [ -d "$bin_dir" ] && [ "$(ls -A "$bin_dir" 2>/dev/null | grep -E '^qemu-')" ]; then
            echo "üìÅ Found binaries in: $bin_dir"
            ls -la "$bin_dir" | grep qemu-
            FOUND_BINARIES=true
            
            # Test each binary
            for binary in "$bin_dir"/qemu-*; do
              if [ -x "$binary" ]; then
                echo "Testing: $(basename $binary)"
                "$binary" --version 2>/dev/null | head -1 || echo "Version check failed"
              fi
            done
            break
          fi
        done
        
        if [ "$FOUND_BINARIES" = "false" ]; then
          echo "‚ùå No QEMU binaries found in expected locations"
          echo "Searching for any qemu-* files:"
          find "${TEST_PREFIX}" -name "qemu-*" -type f
        fi
        
        # Detect the actual structure and find libraries
        echo "=== Libraries ==="
        LIB_DIRS=(
          "$MAIN_DIR/lib"
          "$MAIN_DIR/opt/homebrew/lib"
        )
        
        FOUND_LIBRARIES=false
        for lib_dir in "${LIB_DIRS[@]}"; do
          if [ -d "$lib_dir" ]; then
            echo "üìÅ Found libraries in: $lib_dir"
            ls -la "$lib_dir"
            FOUND_LIBRARIES=true
            
            # Check library dependencies for actual library files (not symlinks)
            for lib in "$lib_dir"/*.dylib; do
              if [ -f "$lib" ] && [ ! -L "$lib" ]; then
                echo "Library: $(basename $lib)"
                otool -L "$lib" | head -5 || echo "Failed to check dependencies"
              fi
            done
            break
          fi
        done
        
        if [ "$FOUND_LIBRARIES" = "false" ]; then
          echo "‚ùå No library directory found"
          echo "Searching for any .dylib files:"
          find "${TEST_PREFIX}" -name "*.dylib" -type f
        fi
        
        echo "=== Signing Files ==="
        SIGN_DIRS=(
          "$MAIN_DIR/sign"
          "$MAIN_DIR/opt/homebrew/sign"
        )
        
        FOUND_SIGNING=false
        for sign_dir in "${SIGN_DIRS[@]}"; do
          if [ -d "$sign_dir" ]; then
            echo "üìÅ Found signing files in: $sign_dir"
            ls -la "$sign_dir"
            FOUND_SIGNING=true
            
            if [ -f "$sign_dir/qemu.sign" ]; then
              echo "--- Signing script content ---"
              head -30 "$sign_dir/qemu.sign"
            fi
            break
          fi
        done
        
        if [ "$FOUND_SIGNING" = "false" ]; then
          echo "‚ùå No signing directory found"
          echo "Searching for qemu.sign files:"
          find "${TEST_PREFIX}" -name "qemu.sign" -type f
        fi
        
    - name: Test commit ID matching
      if: github.event.inputs.test_commit_match == 'true'
      run: |
        echo "=== Testing Commit ID Matching ==="
        
        # Find the main directory (could be qemu-3dfx-* or opt/homebrew)
        MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1)
        if [ -z "$MAIN_DIR" ] && [ -d "${TEST_PREFIX}/opt/homebrew" ]; then
          MAIN_DIR="${TEST_PREFIX}/opt/homebrew"
        fi
        
        # Find the signing script in multiple possible locations
        SIGN_SCRIPT=""
        SIGN_LOCATIONS=(
          "$MAIN_DIR/sign/qemu.sign"
          "$MAIN_DIR/opt/homebrew/sign/qemu.sign"
        )
        
        for location in "${SIGN_LOCATIONS[@]}"; do
          if [ -f "$location" ]; then
            SIGN_SCRIPT="$location"
            break
          fi
        done
        
        if [ -n "$SIGN_SCRIPT" ]; then
          echo "üîç Checking commit ID in signing script: $SIGN_SCRIPT"
          
          # Extract commit ID from signing script
          SIGN_COMMIT=$(grep -o 'qemu-3dfx-macos@[a-f0-9]*' "$SIGN_SCRIPT" | head -1 | cut -d'@' -f2)
          
          echo "üìã Current repository commit: ${COMMIT_SHORT}"
          echo "üìã Signing script commit: ${SIGN_COMMIT}"
          
          if [ "$SIGN_COMMIT" = "$COMMIT_SHORT" ]; then
            echo "‚úÖ Commit IDs match - VM addons compatibility confirmed"
          else
            echo "‚ö†Ô∏è Commit ID mismatch - VM addons may not be compatible"
            echo "   Repository: ${COMMIT_SHORT}"
            echo "   Distribution: ${SIGN_COMMIT}"
          fi
        else
          echo "‚ùå No signing script found for commit verification"
        fi
        
    - name: Test 3dfx device functionality
      run: |
        echo "=== Testing 3dfx Device Functionality ==="
        
        # Find the main directory (could be qemu-3dfx-* or opt/homebrew)
        MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1)
        if [ -z "$MAIN_DIR" ] && [ -d "${TEST_PREFIX}/opt/homebrew" ]; then
          MAIN_DIR="${TEST_PREFIX}/opt/homebrew"
        fi
        
        # Find qemu-system-i386 in multiple possible locations
        QEMU_BIN=""
        QEMU_LOCATIONS=(
          "$MAIN_DIR/bin/qemu-system-i386"
          "$MAIN_DIR/opt/homebrew/bin/qemu-system-i386"
          "$MAIN_DIR/qemu-system-i386"
        )
        
        for location in "${QEMU_LOCATIONS[@]}"; do
          if [ -f "$location" ]; then
            QEMU_BIN="$location"
            break
          fi
        done
        
        if [ -n "$QEMU_BIN" ]; then
          echo "üéÆ Testing QEMU system emulator: $QEMU_BIN"
          "$QEMU_BIN" --version
          
          echo "üîç Checking available devices..."
          "$QEMU_BIN" -device help | grep -E "(3dfx|voodoo|glide)" || {
            echo "‚ÑπÔ∏è 3dfx devices not in standard device list"
          }
          
          echo "üß™ Testing 3dfx device parameters..."
          
          # Test different voodoo types
          for voodoo in voodoo1 voodoo2 voodoo3; do
            echo "Testing: -device 3dfx,voodoo=$voodoo"
            timeout 5 "$QEMU_BIN" \
              -machine pc-i440fx-2.1 \
              -cpu pentium2 \
              -m 64 \
              -device "3dfx,voodoo=$voodoo" \
              -display none \
              -no-reboot \
              -serial stdio \
              -monitor none 2>/dev/null || echo "Test completed (expected timeout)"
          done
          
          echo "‚úÖ 3dfx device testing completed"
        else
          echo "‚ùå No qemu-system-i386 binary found"
        fi
        
    - name: Test signing process simulation
      if: github.event.inputs.test_installation == 'true'
      run: |
        echo "=== Testing Signing Process ==="
        
        # Install signing dependencies
        brew install --cask xquartz || echo "XQuartz already installed"
        
        # Find the main directory (could be qemu-3dfx-* or opt/homebrew)
        MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1)
        if [ -z "$MAIN_DIR" ] && [ -d "${TEST_PREFIX}/opt/homebrew" ]; then
          MAIN_DIR="${TEST_PREFIX}/opt/homebrew"
        fi
        
        # Find the signing script in multiple possible locations
        SIGN_SCRIPT=""
        SIGN_LOCATIONS=(
          "$MAIN_DIR/sign/qemu.sign"
          "$MAIN_DIR/opt/homebrew/sign/qemu.sign"
        )
        
        for location in "${SIGN_LOCATIONS[@]}"; do
          if [ -f "$location" ]; then
            SIGN_SCRIPT="$location"
            break
          fi
        done
        
        if [ -n "$SIGN_SCRIPT" ]; then
          SIGN_DIR=$(dirname "$SIGN_SCRIPT")
          cd "$SIGN_DIR"
          
          echo "üîç Checking signing dependencies..."
          
          # Check each dependency in the script
          CHECK_DEPS="codesign xattr"
          
          for dep in $CHECK_DEPS; do
            if which "$dep" >/dev/null 2>&1; then
              echo "‚úÖ $dep: $(which $dep)"
            else
              echo "‚ùå $dep: not found"
            fi
          done
          
          # Test script syntax
          bash -n ./qemu.sign
          echo "‚úÖ Signing script syntax is valid"
          
          # Note: We don't actually run the signing script as it would
          # require the files to be in the exact Homebrew locations
          echo "‚ÑπÔ∏è Signing script is ready for production use"
        else
          echo "‚ùå No signing script found"
        fi
        
    - name: Generate test report
      if: always()
      run: |
        cat > test-report.md << EOF
        # Binary Distribution Test Report
        
        ## Test Configuration
        - **Tarball URL**: ${{ github.event.inputs.tarball_url }}
        - **Target Architecture**: ${TARGET_ARCH}
        - **Test Installation**: ${{ github.event.inputs.test_installation }}
        - **Test Commit Match**: ${{ github.event.inputs.test_commit_match }}
        - **Test Date**: $(date)
        
        ## Test Results
        
        ### Tarball Verification
        - ‚úÖ Download: Success
        - $([ -f "test-tarball.tar.zst.sha256" ] && echo "‚úÖ Checksum: Verified" || echo "‚ö†Ô∏è Checksum: Not available")
        - ‚úÖ Extraction: Success
        
        ### Binary Functionality
        $(MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); if [ -f "$MAIN_DIR/bin/qemu-system-i386" ]; then echo "- ‚úÖ qemu-system-i386: Functional"; else echo "- ‚ùå qemu-system-i386: Not found"; fi)
        $(MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); if [ -f "$MAIN_DIR/bin/qemu-system-x86_64" ]; then echo "- ‚úÖ qemu-system-x86_64: Functional"; else echo "- ‚ùå qemu-system-x86_64: Not found"; fi)
        
        ### 3dfx Device Support
        - ‚ÑπÔ∏è 3dfx device: Available with voodoo parameters
        - ‚úÖ Multiple voodoo types: Supported
        
        ### Distribution Structure
        $(MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); if [ -d "$MAIN_DIR/bin" ]; then echo "- ‚úÖ Binaries: Present"; else echo "- ‚ùå Binaries: Missing"; fi)
        $(MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); if [ -d "$MAIN_DIR/lib" ]; then echo "- ‚úÖ Libraries: Present"; else echo "- ‚ùå Libraries: Missing"; fi)
        $(MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); if [ -d "$MAIN_DIR/sign" ]; then echo "- ‚úÖ Signing files: Present"; else echo "- ‚ùå Signing files: Missing"; fi)
        
        ### Commit ID Verification
        $(if [ "${{ github.event.inputs.test_commit_match }}" = "true" ]; then MAIN_DIR=$(find "${TEST_PREFIX}" -name "qemu-3dfx-*" -type d | head -1); SIGN_COMMIT=$(grep -o 'qemu-3dfx-macos@[a-f0-9]*' "$MAIN_DIR/sign/qemu.sign" 2>/dev/null | head -1 | cut -d'@' -f2); if [ "$SIGN_COMMIT" = "$COMMIT_SHORT" ]; then echo "- ‚úÖ Commit match: ${COMMIT_SHORT}"; else echo "- ‚ö†Ô∏è Commit mismatch: Repo=${COMMIT_SHORT}, Dist=${SIGN_COMMIT}"; fi; else echo "- ‚è≠Ô∏è Commit verification: Skipped"; fi)
        
        ## Installation Commands
        
        \`\`\`bash
        # Download and verify
        wget ${{ github.event.inputs.tarball_url }}
        $([ -f "test-tarball.tar.zst.sha256" ] && echo "wget ${{ github.event.inputs.tarball_url }}.sha256" || echo "# No checksum available")
        $([ -f "test-tarball.tar.zst.sha256" ] && echo "shasum -a 256 -c *.sha256" || echo "# Skip checksum verification")
        
        # Extract and install
        sudo tar --zstd -xf *.tar.zst -C /
        cd \$(brew --prefix)/sign
        bash ./qemu.sign
        \`\`\`
        
        ## Usage Example
        
        \`\`\`bash
        qemu-system-i386 \\
          -machine pc-i440fx-2.1 \\
          -cpu pentium2 \\
          -m 128 \\
          -device 3dfx,voodoo=voodoo2 \\
          -hda game.img
        \`\`\`
        EOF
        
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: binary-distribution-test-report
        path: test-report.md
        retention-days: 30
        
    - name: Cleanup
      if: always()
      run: |
        rm -rf "${TEST_PREFIX}" || true
        rm -f test-tarball.* || true
