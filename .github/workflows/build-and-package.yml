name: Build and Package QEMU 3dfx

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean
      target_arch:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
        - arm64
        - x86_64
        - universal
      apply_experimental:
        description: 'Apply experimental patches (SDL Clipboard) - EXPERIMENTAL'
        required: false
        default: false
        type: boolean
      auto_sign:
        description: 'Automatically sign binaries during build (requires macOS runners)'
        required: false
        default: false
        type: boolean
      commit_id:
        description: 'Specific commit ID to build (leave empty for latest)'
        required: false
        default: ''
        type: string

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build:
    name: Build QEMU 3dfx (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 120  # 2 hour timeout to prevent hanging
    strategy:
      matrix:
        arch: ${{ github.event.inputs.target_arch == 'universal' && fromJSON('["arm64", "x86_64"]') || fromJSON(format('["{0}"]', github.event.inputs.target_arch)) }}
        include:
          - arch: arm64
            runner: macos-latest  # ARM64 (Apple Silicon)
            runner_arch: arm64
          - arch: x86_64
            runner: macos-13      # Intel x86_64
            runner_arch: x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for commit tracking
        ref: ${{ github.event.inputs.commit_id != '' && github.event.inputs.commit_id || github.ref }}
        
    - name: Set up environment
      run: |
        echo "BUILD_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "RUNNER_ARCH=${{ matrix.runner_arch }}" >> $GITHUB_ENV
        
        # Show which commit we're building
        if [ -n "${{ github.event.inputs.commit_id }}" ]; then
          echo "üéØ Building specific commit: ${{ github.event.inputs.commit_id }}"
          # Verify the commit exists and get its short hash
          COMMIT_SHORT=$(git rev-parse --short "${{ github.event.inputs.commit_id }}")
          COMMIT_FULL=$(git rev-parse "${{ github.event.inputs.commit_id }}")
          echo "üìã Full commit hash: ${COMMIT_FULL}"
        else
          echo "üì¶ Building latest commit from current branch"
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          COMMIT_FULL=$(git rev-parse HEAD)
        fi
        
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        echo "COMMIT_FULL=${COMMIT_FULL}" >> $GITHUB_ENV
        echo "BUILD_IDENTIFIER=qemu-3dfx-macos@${COMMIT_SHORT}" >> $GITHUB_ENV
        
        # Show commit information
        echo "=== Commit Information ==="
        echo "Short hash: ${COMMIT_SHORT}"
        echo "Full hash: ${COMMIT_FULL}"
        echo "Commit message: $(git log -1 --pretty=format:'%s' ${COMMIT_FULL})"
        echo "Author: $(git log -1 --pretty=format:'%an <%ae>' ${COMMIT_FULL})"
        echo "Date: $(git log -1 --pretty=format:'%cd' ${COMMIT_FULL})"
        
        # Set build timestamp
        BUILD_DATE=$(date +%Y%m%d)
        echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
        
    - name: Install build dependencies
      run: |
        # Install Xcode command line tools dependencies
        xcode-select --install 2>/dev/null || true
        
        # Install XQuartz (REQUIRED by KJ for Mesa GL context support)
        brew install --cask xquartz
        
        # Install build tools (matching FRESH-SYSTEM-BUILD-GUIDE.sh)
        brew install cmake meson ninja pkg-config python@3.12
        
        # Install core QEMU dependencies (from fresh system guide)
        brew install capstone glib gettext gnutls libepoxy libgcrypt
        brew install libslirp libusb jpeg-turbo lz4 opus sdl2 zstd
        brew install libffi ncurses pixman sdl2_image
        
        # Install SPICE and audio support (from fresh system guide)
        brew install spice-protocol spice-server mt32emu
        brew install sdl12-compat sdl2_net sdl2_sound
        
        # Install Python modules required for virglrenderer build
        # Install PyYAML for both system python3 and Homebrew python3.12
        python3 -m pip install --break-system-packages PyYAML || true
        /opt/homebrew/bin/python3.12 -m pip install --break-system-packages PyYAML || true
        
        # Verify PyYAML is available for the Python version meson will use
        echo "Checking PyYAML availability:"
        python3 -c "import yaml; print('PyYAML available for system python3')" || echo "PyYAML not found for system python3"
        /opt/homebrew/bin/python3.12 -c "import yaml; print('PyYAML available for Homebrew python3.12')" || echo "PyYAML not found for Homebrew python3.12"
        
        # X11 development headers are provided by XQuartz
        # The fix-pkgconfig-to-xquartz.sh script handles the pkg-config redirection
        
    - name: Build QEMU 3dfx with Homebrew
      run: |
        # Set commit identity for the sign_commit script
        export QEMU_3DFX_COMMIT="${COMMIT_SHORT}"
        
        # Set experimental patch flag if requested
        if [ "${{ github.event.inputs.apply_experimental }}" = "true" ]; then
          export APPLY_EXPERIMENTAL_PATCHES="true"
          echo "üß™ Experimental patches will be applied"
        else
          export APPLY_EXPERIMENTAL_PATCHES="false"
          echo "üì¶ Standard build without experimental patches"
        fi
        
        # CRITICAL: Run XQuartz pkg-config redirection BEFORE building
        # This is the key step from FRESH-SYSTEM-BUILD-GUIDE.sh
        echo "üîß CRITICAL: Running XQuartz pkg-config redirection..."
        bash fix-pkgconfig-to-xquartz.sh
        echo "‚úÖ XQuartz redirection completed"
        
        # Install our custom QEMU 3dfx formula (following fresh system guide)
        echo "Installing QEMU 3dfx via Homebrew formula..."
        
        # Check SPICE dependencies before building
        echo "=== Checking SPICE dependencies ==="
        brew list spice-protocol || echo "‚ö†Ô∏è spice-protocol not installed"
        brew list spice-server || echo "‚ö†Ô∏è spice-server not installed"
        
        # Show pkg-config availability for SPICE
        pkg-config --exists spice-protocol && echo "‚úÖ spice-protocol pkg-config found" || echo "‚ö†Ô∏è spice-protocol pkg-config missing"
        pkg-config --exists spice-server && echo "‚úÖ spice-server pkg-config found" || echo "‚ö†Ô∏è spice-server pkg-config missing"
        
        # Build via local formula (matching fresh system guide approach)
        brew install --build-from-source ./homebrew-qemu3dfx/Formula/qemu-3dfx.rb
        
        # Verify installation
        echo "Verifying QEMU 3dfx installation..."
        brew list qemu-3dfx
        
        # Check version signature
        qemu-system-i386 --version | grep "featuring qemu-3dfx" || {
          echo "‚ùå QEMU 3dfx signature not found in version output"
          exit 1
        }
        
        # Show build configuration summary
        echo "=== QEMU Build Configuration ==="
        qemu-system-i386 --version
        echo ""
        echo "Checking for SPICE support in binary:"
        strings $(which qemu-system-i386) | grep -i spice | head -5 || echo "No SPICE strings found in binary"
        
        echo "‚úÖ QEMU 3dfx installed successfully via Homebrew"
        
    - name: Verify build
      run: |
        # Check Homebrew installation paths
        HOMEBREW_PREFIX=$(brew --prefix)
        echo "=== Checking Homebrew QEMU 3dfx installation ==="
        
        # Check installed binaries
        echo "Checking QEMU binaries in ${HOMEBREW_PREFIX}/bin:"
        ls -la "${HOMEBREW_PREFIX}/bin/qemu-"* || echo "No QEMU binaries found"
        
        # Check for essential binaries
        FOUND_BINARIES=0
        
        # Helper function to check and test binaries
        check_binary() {
          local binary_name="$1"
          local description="$2"
          
          if [ -f "${HOMEBREW_PREFIX}/bin/${binary_name}" ]; then
            echo "‚úÖ ${binary_name} installed successfully"
            ${HOMEBREW_PREFIX}/bin/${binary_name} --version
            FOUND_BINARIES=$((FOUND_BINARIES + 1))
          else
            echo "‚ö†Ô∏è ${binary_name} not found ${description}"
          fi
        }
        
        # Check core binaries
        check_binary "qemu-system-i386" "(required for 3dfx support)"
        check_binary "qemu-system-x86_64" "(required for modern systems)"
        check_binary "qemu-system-aarch64" "(ARM virtualization)"
        check_binary "qemu-img" "(disk image utility)"
        
        # Check libraries
        echo "=== Checking installed libraries ==="
        ls -la "${HOMEBREW_PREFIX}/lib/libglide"* 2>/dev/null || echo "‚ö†Ô∏è Glide libraries not found"
        ls -la "${HOMEBREW_PREFIX}/lib/libvirglrenderer"* 2>/dev/null || echo "‚ö†Ô∏è VirGL libraries not found"
        ls -la "${HOMEBREW_PREFIX}/lib/libspice-server"* 2>/dev/null || echo "‚ÑπÔ∏è SPICE libraries not found (optional - may be disabled in build)"
        
        # Check QEMU data files
        echo "=== Checking QEMU data files ==="
        ls -la "${HOMEBREW_PREFIX}/share/qemu/" 2>/dev/null || echo "‚ö†Ô∏è QEMU data files not found"
        
        # Require at least one binary to be built
        if [ $FOUND_BINARIES -eq 0 ]; then
          echo "‚ùå No QEMU binaries were installed successfully"
          exit 1
        else
          echo "‚úÖ Found $FOUND_BINARIES QEMU binaries installed successfully"
        fi
        
    - name: Test 3dfx device availability
      run: |
        HOMEBREW_PREFIX=$(brew --prefix)
        
        echo "=== Testing device availability ==="
        
        # Test with i386 if available
        if [ -f "${HOMEBREW_PREFIX}/bin/qemu-system-i386" ]; then
          echo "Testing 3dfx device with qemu-system-i386..."
          ${HOMEBREW_PREFIX}/bin/qemu-system-i386 -device help | grep -i "3dfx\|glide\|voodoo" || {
            echo "‚ÑπÔ∏è 3dfx device may require specific parameters"
            echo "Testing with voodoo parameter..."
            ${HOMEBREW_PREFIX}/bin/qemu-system-i386 -device 3dfx,help 2>/dev/null || true
          }
        else
          echo "‚ö†Ô∏è qemu-system-i386 not available for 3dfx testing"
        fi
        
        # Test Virgl3D support with x86_64 if available
        if [ -f "${HOMEBREW_PREFIX}/bin/qemu-system-x86_64" ]; then
          echo "Testing Virgl3D device with qemu-system-x86_64..."
          ${HOMEBREW_PREFIX}/bin/qemu-system-x86_64 -device help | grep -i "virtio-vga-gl\|virgl" || echo "‚ÑπÔ∏è Virgl3D support not detected"
        else
          echo "‚ö†Ô∏è qemu-system-x86_64 not available for Virgl3D testing"
        fi
        
    - name: Create staging directory
      run: |
        STAGE_DIR="staging/qemu-3dfx-${BUILD_DATE}-${COMMIT_SHORT}-darwin-${{ matrix.arch }}"
        mkdir -p "${STAGE_DIR}/opt/homebrew/bin"
        mkdir -p "${STAGE_DIR}/opt/homebrew/lib"
        mkdir -p "${STAGE_DIR}/opt/homebrew/share/qemu"
        mkdir -p "${STAGE_DIR}/opt/homebrew/sign"
        mkdir -p "${STAGE_DIR}/usr/local/lib"
        
        echo "STAGE_DIR=${STAGE_DIR}" >> $GITHUB_ENV
        
    - name: Package Homebrew installation
      run: |
        HOMEBREW_PREFIX=$(brew --prefix)
        
        echo "=== Packaging QEMU 3dfx Homebrew installation ==="
        
        # Copy binaries
        echo "Copying QEMU binaries..."
        cp "${HOMEBREW_PREFIX}/bin/qemu-system-"* "${STAGE_DIR}/opt/homebrew/bin/" 2>/dev/null || true
        cp "${HOMEBREW_PREFIX}/bin/qemu-img" "${STAGE_DIR}/opt/homebrew/bin/" 2>/dev/null || true
        
        # Copy libraries with proper symlinks
        echo "Copying and creating library symlinks..."
        
        # List all available libraries for debugging
        echo "=== Available libraries in Homebrew prefix ==="
        ls -la "${HOMEBREW_PREFIX}/lib/" | grep -E "(glide|virgl|spice|SDL2)" || echo "No matching libraries found"
        
        # Function to copy library with multiple fallback patterns
        copy_library() {
          local lib_name="$1"
          local lib_patterns=("${@:2}")
          local found=false
          
          for pattern in "${lib_patterns[@]}"; do
            if [ -f "${HOMEBREW_PREFIX}/lib/${pattern}" ]; then
              cp "${HOMEBREW_PREFIX}/lib/${pattern}" "${STAGE_DIR}/opt/homebrew/lib/"
              # Create symlink if this is a versioned library
              if [[ "$pattern" =~ \.[0-9]+\.dylib$ ]]; then
                ln -sf "$pattern" "${STAGE_DIR}/opt/homebrew/lib/${lib_name}.dylib"
              fi
              echo "‚úÖ Copied ${lib_name} library: ${pattern}"
              found=true
              break
            fi
          done
          
          if [ "$found" = "false" ]; then
            echo "‚ö†Ô∏è ${lib_name} library not found (tried: ${lib_patterns[*]})"
          fi
        }
        
        # Copy Glide libraries (3dfx support) - try multiple patterns
        copy_library "libglide2x" "libglide2x.0.dylib" "libglide2x.dylib"
        copy_library "libglide3x" "libglide3x.0.dylib" "libglide3x.dylib"
        
        # Copy VirGL libraries (Virgl3D support) - try multiple patterns
        copy_library "libvirglrenderer" "libvirglrenderer.1.dylib" "libvirglrenderer.dylib"
        
        # Copy SDL2 library (dependency for display support) - try multiple patterns
        copy_library "libSDL2" "libSDL2-2.0.0.dylib" "libSDL2.dylib"
        
        # Copy SPICE libraries with improved detection
        echo "Looking for SPICE libraries..."
        SPICE_FOUND=false
        
        # Try multiple SPICE library patterns
        for spice_pattern in "libspice-server.1.dylib" "libspice-server.dylib"; do
          if [ -f "${HOMEBREW_PREFIX}/lib/${spice_pattern}" ]; then
            cp "${HOMEBREW_PREFIX}/lib/${spice_pattern}" "${STAGE_DIR}/opt/homebrew/lib/"
            # Create unversioned symlink if this is versioned
            if [[ "$spice_pattern" =~ libspice-server\.[0-9]+\.dylib ]]; then
              ln -sf "$spice_pattern" "${STAGE_DIR}/opt/homebrew/lib/libspice-server.dylib"
            fi
            echo "‚úÖ Copied SPICE library: ${spice_pattern}"
            SPICE_FOUND=true
            break
          fi
        done
        
        # Also check Cellar directories for SPICE (they might be in version-specific directories)
        if [ "$SPICE_FOUND" = "false" ]; then
          echo "Searching for SPICE libraries in Cellar directories..."
          find "${HOMEBREW_PREFIX}/Cellar" -name "libspice-server*.dylib" -type f 2>/dev/null | while read spice_lib; do
            if [ -f "$spice_lib" ]; then
              cp "$spice_lib" "${STAGE_DIR}/opt/homebrew/lib/"
              base_name=$(basename "$spice_lib")
              if [[ "$base_name" =~ libspice-server\.([0-9]+)\.dylib ]]; then
                ln -sf "$base_name" "${STAGE_DIR}/opt/homebrew/lib/libspice-server.dylib"
              fi
              echo "‚úÖ Found and copied SPICE library from Cellar: ${base_name}"
              SPICE_FOUND=true
              break
            fi
          done
        fi
        
        if [ "$SPICE_FOUND" = "false" ]; then
          echo "‚ÑπÔ∏è SPICE libraries not found (may be disabled in build)"
        fi
        
        # Verify all required libraries are present in the package
        echo ""
        echo "=== Verifying packaged libraries ==="
        required_libs=(
          "libglide2x.dylib"
          "libglide3x.dylib" 
          "libvirglrenderer.1.dylib"
          "libspice-server.1.dylib"
          "libSDL2.dylib"
        )
        
        missing_libs=()
        for lib in "${required_libs[@]}"; do
          # Check both versioned and unversioned forms
          found=false
          for lib_file in "${STAGE_DIR}/opt/homebrew/lib/${lib}" "${STAGE_DIR}/opt/homebrew/lib/${lib%.*}.0.dylib"; do
            if [ -f "$lib_file" ] || [ -L "$lib_file" ]; then
              echo "‚úì ${lib} found"
              found=true
              break
            fi
          done
          if [ "$found" = "false" ]; then
            missing_libs+=("$lib")
          fi
        done
        
        if [ ${#missing_libs[@]} -gt 0 ]; then
          echo "‚ö†Ô∏è Missing libraries in package:"
          printf '   %s\n' "${missing_libs[@]}"
          echo ""
          echo "Available libraries in package:"
          ls -la "${STAGE_DIR}/opt/homebrew/lib/" | grep '\.dylib'
        else
          echo "‚úÖ All required libraries are packaged successfully!"
        fi
        
        # Copy QEMU data files (BIOS, ROMs, etc.)
        echo "Copying QEMU data files..."
        if [ -d "${HOMEBREW_PREFIX}/share/qemu" ]; then
          cp -r "${HOMEBREW_PREFIX}/share/qemu/"* "${STAGE_DIR}/opt/homebrew/share/qemu/" 2>/dev/null || true
        fi
        
        # Copy signing files
        echo "Copying signing files..."
        if [ -f "${HOMEBREW_PREFIX}/qemu-3dfx/opt/homebrew/sign/qemu.sign" ]; then
          cp "${HOMEBREW_PREFIX}/qemu-3dfx/opt/homebrew/sign/qemu.sign" "${STAGE_DIR}/opt/homebrew/sign/"
        elif [ -f "${HOMEBREW_PREFIX}/sign/qemu.sign" ]; then
          cp "${HOMEBREW_PREFIX}/sign/qemu.sign" "${STAGE_DIR}/opt/homebrew/sign/"
        elif [ -f "qemu.sign" ]; then
          cp "qemu.sign" "${STAGE_DIR}/opt/homebrew/sign/"
        fi
        
        if [ -f "${HOMEBREW_PREFIX}/qemu-3dfx/opt/homebrew/sign/qemu.rsrc" ]; then
          cp "${HOMEBREW_PREFIX}/qemu-3dfx/opt/homebrew/sign/qemu.rsrc" "${STAGE_DIR}/opt/homebrew/sign/"
        elif [ -f "${HOMEBREW_PREFIX}/sign/qemu.rsrc" ]; then
          cp "${HOMEBREW_PREFIX}/sign/qemu.rsrc" "${STAGE_DIR}/opt/homebrew/sign/"
        elif [ -f "qemu.rsrc" ]; then
          cp "qemu.rsrc" "${STAGE_DIR}/opt/homebrew/sign/"
        fi
        
        # Update signing script with current commit
        if [ -f "${STAGE_DIR}/opt/homebrew/sign/qemu.sign" ]; then
          sed -i '' "s/qemu-3dfx-macos@[a-f0-9]*/qemu-3dfx-macos@${COMMIT_SHORT}/g" "${STAGE_DIR}/opt/homebrew/sign/qemu.sign"
        fi
        
        # Create symlinks in /usr/local/lib for compatibility (absolute paths)
        echo "Creating compatibility symlinks..."
        ln -sf "/opt/homebrew/lib/libglide2x.dylib" "${STAGE_DIR}/usr/local/lib/libglide2x.dylib"
        ln -sf "/opt/homebrew/lib/libglide3x.dylib" "${STAGE_DIR}/usr/local/lib/libglide3x.dylib"
        ln -sf "/opt/homebrew/lib/libSDL2.dylib" "${STAGE_DIR}/usr/local/lib/libSDL2.dylib"
        echo "‚úÖ Created compatibility symlinks in /usr/local/lib"
        
        # Create build info file
        echo "Creating build information..."
        echo "QEMU 3dfx Homebrew Package" > "${STAGE_DIR}/build-info.txt"
        echo "==========================" >> "${STAGE_DIR}/build-info.txt"
        echo "Build Date: $(date)" >> "${STAGE_DIR}/build-info.txt"
        echo "Commit: ${COMMIT_SHORT}" >> "${STAGE_DIR}/build-info.txt"
        echo "Full Commit: ${COMMIT_FULL}" >> "${STAGE_DIR}/build-info.txt"
        echo "QEMU Version: 9.2.2" >> "${STAGE_DIR}/build-info.txt"
        echo "Target Architecture: ${{ matrix.arch }}" >> "${STAGE_DIR}/build-info.txt"
        echo "Runner Architecture: ${{ matrix.runner_arch }}" >> "${STAGE_DIR}/build-info.txt"
        echo "Package Type: Homebrew" >> "${STAGE_DIR}/build-info.txt"
        echo "Installation Path: /opt/homebrew" >> "${STAGE_DIR}/build-info.txt"
        echo "Experimental Patches: ${{ github.event.inputs.apply_experimental || 'false' }}" >> "${STAGE_DIR}/build-info.txt"
        echo "Auto-signed: ${{ github.event.inputs.auto_sign || 'false' }}" >> "${STAGE_DIR}/build-info.txt"
        echo "Repository: startergo/qemu-3dfx-macos" >> "${STAGE_DIR}/build-info.txt"
        
        # Show package structure
        echo "=== Package structure ==="
        find "${STAGE_DIR}" -type f | head -20
        echo "..."
        echo "Total files: $(find "${STAGE_DIR}" -type f | wc -l)"
        
    - name: Auto-sign binaries (optional)
      if: github.event.inputs.auto_sign == 'true'
      run: |
        echo "=== Auto-signing QEMU binaries ==="
        
        # Change to the signing directory
        cd "${STAGE_DIR}/opt/homebrew/sign"
        
        # Set environment variable for the signing script
        export QEMU_3DFX_COMMIT="${COMMIT_SHORT}"
        
        # Run the signing script
        echo "Running automatic code signing..."
        bash ./qemu.sign
        
        # Verify signatures
        echo "=== Verifying signatures ==="
        for binary in ../bin/qemu-*; do
          if [ -f "$binary" ]; then
            echo "Checking signature for $(basename "$binary"):"
            codesign -v "$binary" 2>&1 || echo "  Warning: Signature verification failed"
            codesign -d -r- "$binary" 2>&1 || echo "  Warning: Could not display requirements"
          fi
        done
        
        # Check library signatures
        for lib in ../lib/*.dylib; do
          if [ -f "$lib" ] && [ ! -L "$lib" ]; then
            echo "Checking signature for $(basename "$lib"):"
            codesign -v "$lib" 2>&1 || echo "  Warning: Library signature verification failed"
          fi
        done
        
        echo "‚úÖ Auto-signing completed"
        
    - name: Create distribution tarball
      run: |
        cd staging
        
        TARBALL_NAME="qemu-9.2.2-3dfx-${COMMIT_SHORT}-darwin-${{ matrix.arch }}.tar.zst"
        
        # Create compressed tarball from the contents of the staging directory
        # This ensures the tarball contains opt/ and usr/ at the root level
        cd "qemu-3dfx-${BUILD_DATE}-${COMMIT_SHORT}-darwin-${{ matrix.arch }}"
        tar -cf - * | zstd -19 > "../${TARBALL_NAME}"
        cd ..
        
        echo "TARBALL_NAME=${TARBALL_NAME}" >> $GITHUB_ENV
        echo "TARBALL_PATH=staging/${TARBALL_NAME}" >> $GITHUB_ENV
        
        # Generate checksum
        shasum -a 256 "${TARBALL_NAME}" > "${TARBALL_NAME}.sha256"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-3dfx-${{ matrix.arch }}-${{ github.sha }}
        path: |
          staging/*.tar.zst
          staging/*.sha256
        retention-days: 30
        
    - name: Upload staging directory for testing
      uses: actions/upload-artifact@v4
      with:
        name: qemu-3dfx-staging-${{ matrix.arch }}-${{ github.sha }}
        path: staging/
        retention-days: 7

  test-installation:
    name: Test Installation (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: build
    strategy:
      matrix:
        arch: ${{ github.event.inputs.target_arch == 'universal' && fromJSON('["arm64", "x86_64"]') || fromJSON(format('["{0}"]', github.event.inputs.target_arch)) }}
        include:
          - arch: arm64
            runner: macos-latest  # ARM64 (Apple Silicon)
          - arch: x86_64
            runner: macos-13      # Intel x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.commit_id != '' && github.event.inputs.commit_id || github.ref }}
      
    - name: Set environment
      run: |
        # Use the same commit logic as the build job
        if [ -n "${{ github.event.inputs.commit_id }}" ]; then
          COMMIT_SHORT=$(git rev-parse --short "${{ github.event.inputs.commit_id }}")
        else
          COMMIT_SHORT=$(git rev-parse --short HEAD)
        fi
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: qemu-3dfx-${{ matrix.arch }}-${{ github.sha }}
        path: artifacts/
        
    - name: Install Xcode tools for signing
      run: |
        # Install required tools for code signing
        brew install --cask xquartz || true  # For X11 tools
        
    - name: Test tarball extraction
      run: |
        cd artifacts
        
        # Find the tarball
        TARBALL=$(ls qemu-9.2.2-3dfx-*.tar.zst)
        echo "Testing tarball: ${TARBALL}"
        
        # Verify checksum
        shasum -a 256 -c "${TARBALL}.sha256"
        
        # Extract to a test directory (not system-wide)
        mkdir -p test-install
        cd test-install
        
        # Extract tarball - it contains opt/ and usr/ directly at the root
        tar --zstd -xf "../${TARBALL}"
        
        # Show what was extracted
        echo "=== Extracted structure ==="
        find . -type d | head -10
        
        # Test Homebrew package structure (files are now directly in current directory)
        echo "=== Verifying Homebrew package structure ==="
        ls -la "opt/homebrew/bin/" || echo "‚ö†Ô∏è Homebrew bin directory missing"
        ls -la "opt/homebrew/lib/" || echo "‚ö†Ô∏è Homebrew lib directory missing"
        ls -la "opt/homebrew/share/qemu/" || echo "‚ö†Ô∏è Homebrew share/qemu directory missing"
        ls -la "opt/homebrew/sign/" || echo "‚ö†Ô∏è Homebrew sign directory missing"
        ls -la "usr/local/lib/" || echo "‚ö†Ô∏è Compatibility symlinks missing"
        
        # Test that binaries exist and are executable
        if [ -f "opt/homebrew/bin/qemu-system-i386" ]; then
          echo "‚úÖ qemu-system-i386 found"
          file "opt/homebrew/bin/qemu-system-i386"
        else
          echo "‚ö†Ô∏è qemu-system-i386 missing"
        fi
        
        # Test library symlinks
        echo "=== Verifying packaged libraries ==="
        required_libs=(
          "libglide2x.dylib"
          "libglide3x.dylib" 
          "libvirglrenderer.1.dylib"
          "libspice-server.1.dylib"
          "libSDL2.dylib"
        )
        
        for lib in "${required_libs[@]}"; do
          # Check both in lib directory and as symlinks
          found=false
          for lib_path in "opt/homebrew/lib/${lib}" "opt/homebrew/lib/${lib%.*}.0.dylib"; do
            if [ -f "$lib_path" ] || [ -L "$lib_path" ]; then
              if [ -L "$lib_path" ]; then
                echo "‚úÖ ${lib} symlink found: $(readlink "$lib_path")"
              else
                echo "‚úÖ ${lib} file found"
              fi
              found=true
              break
            fi
          done
          if [ "$found" = "false" ]; then
            echo "‚ö†Ô∏è ${lib} missing from package"
          fi
        done
        
        # Test compatibility symlinks
        if [ -L "usr/local/lib/libglide2x.dylib" ]; then
          echo "‚úÖ Compatibility symlink found: $(readlink "usr/local/lib/libglide2x.dylib")"
        else
          echo "‚ö†Ô∏è Compatibility symlink missing"
        fi
        
    - name: Test signing script dependencies
      run: |
        cd artifacts/test-install
        
        # Check if signing dependencies are available
        echo "=== Checking signing dependencies ==="
        
        # Test signing script (dry run)
        if [ -f "opt/homebrew/sign/qemu.sign" ]; then
          cd opt/homebrew/sign
          bash -n ./qemu.sign  # Syntax check
          echo "‚úÖ Signing script syntax is valid"
          
          # Check if qemu.rsrc exists
          if [ -f "./qemu.rsrc" ]; then
            echo "‚úÖ qemu.rsrc found"
          else
            echo "‚ö†Ô∏è qemu.rsrc missing"
          fi
        else
          echo "‚ö†Ô∏è Signing script not found in package"
        fi

  create-release:
    name: Create Release
    runs-on: macos-latest
    needs: [build, test-installation]
    if: github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.commit_id != '' && github.event.inputs.commit_id || github.ref }}
      
    - name: Set environment
      run: |
        # Use the same commit logic as the build job
        if [ -n "${{ github.event.inputs.commit_id }}" ]; then
          COMMIT_SHORT=$(git rev-parse --short "${{ github.event.inputs.commit_id }}")
        else
          COMMIT_SHORT=$(git rev-parse --short HEAD)
        fi
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Collect all tarballs and checksums
        find all-artifacts -name "*.tar.zst" -exec cp {} release-assets/ \;
        find all-artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        
        ls -la release-assets/
        
    - name: Generate release notes
      run: |
        RELEASE_TAG="v$(date +%Y%m%d)-${COMMIT_SHORT}"
        cat > release-notes.md << EOF
        # QEMU 3dfx Homebrew Package ${RELEASE_TAG}
        
        This release includes QEMU 9.2.2 with 3dfx Glide and Mesa GL pass-through support, packaged in Homebrew-compatible format.
        
        ## Build Information
        - **Commit**: ${COMMIT_SHORT}
        - **Build Date**: $(date +%Y-%m-%d)
        - **QEMU Version**: 9.2.2
        - **Package Type**: Homebrew-compatible
        
        ## Supported Architectures
        - macOS ARM64 (Apple Silicon)
        - macOS x86_64 (Intel)
        
        ## Virtualization Support
        - **HVF (Hypervisor Framework)**: Hardware acceleration on macOS
        - **TCG**: Software emulation (cross-platform, slower)
        - **Note**: KVM is not available on macOS - use HVF instead
        
        ## Installation Instructions
        
        1. Download the appropriate tarball for your architecture
        2. Verify the checksum: \`shasum -a 256 -c <tarball>.sha256\`
        3. Extract with sudo: \`sudo tar --zstd -xf <tarball> -C /\`
        4. **If not auto-signed**: Sign the binaries: \`cd /opt/homebrew/sign && sudo bash ./qemu.sign\`
        
        > **Note**: Auto-signed packages are ready to use immediately after extraction.
        > **macOS Note**: Use \`-accel hvf\` for hardware acceleration (not \`-enable-kvm\`).
        
        ## Building from Source (Fresh System)
        
        To reproduce this build on a fresh macOS system:
        
        \`\`\`bash
        # Install prerequisites
        xcode-select --install
        brew install --cask xquartz
        # Log out and back in for XQuartz activation
        
        # Clone repository
        git clone https://github.com/startergo/qemu-3dfx-macos.git
        cd qemu-3dfx-macos
        
        # CRITICAL: Run XQuartz redirection first
        bash fix-pkgconfig-to-xquartz.sh
        
        # Install dependencies and build
        brew install cmake meson ninja pkg-config python@3.12 \\
          capstone glib gettext gnutls libepoxy libgcrypt \\
          libslirp libusb jpeg-turbo lz4 opus sdl2 zstd \\
          libffi ncurses pixman sdl2_image \\
          spice-protocol spice-server mt32emu \\
          sdl12-compat sdl2_net sdl2_sound
          
        # Build via Homebrew formula
        brew install --build-from-source ./homebrew-qemu3dfx/Formula/qemu-3dfx.rb
        \`\`\`
        
        ## Package Structure
        
        The package installs to \`/opt/homebrew\` with the following structure:
        - \`/opt/homebrew/bin/\` - QEMU binaries
        - \`/opt/homebrew/lib/\` - 3dfx Glide and VirGL libraries
        - \`/opt/homebrew/share/qemu/\` - QEMU data files (BIOS, ROMs)
        - \`/opt/homebrew/sign/\` - Code signing scripts
        - \`/usr/local/lib/\` - Compatibility symlinks
        
        ## Usage Examples
        
        ### 3dfx Glide Support (Legacy DOS/Windows 9x)
        \`\`\`bash
        /opt/homebrew/bin/qemu-system-i386 \\
          -machine pc-i440fx-2.1 \\
          -cpu pentium2 \\
          -m 128 \\
          -device 3dfx,voodoo=voodoo2 \\
          -display sdl \\
          -hda dos.img
        \`\`\`
        
        ### Mesa OpenGL Support (macOS with HVF)
        \`\`\`bash
        /opt/homebrew/bin/qemu-system-x86_64 \\
          -accel hvf \\
          -m 2048 \\
          -device virtio-vga-gl \\
          -display sdl,gl=on \\
          -hda windows.img
        \`\`\`
        
        ### 3dfx with Hardware Acceleration (Apple Silicon)
        \`\`\`bash
        /opt/homebrew/bin/qemu-system-x86_64 \\
          -M pc \\
          -cpu max \\
          -accel hvf \\
          -m 1G \\
          -device virtio-vga-gl \\
          -display sdl,gl=on \\
          -device glide,model=voodoo2 \\
          -hda retro_games.img
        \`\`\`
        
        ### Performance Tips for macOS
        \`\`\`bash
        # For best performance on Apple Silicon:
        /opt/homebrew/bin/qemu-system-x86_64 \\
          -M pc \\
          -cpu max \\
          -accel hvf \\
          -smp 4 \\
          -m 2G \\
          -device virtio-vga-gl \\
          -display sdl,gl=on \\
          -machine usb=off \\
          -rtc base=localtime \\
          -hda modern_guest.img
        \`\`\`
        
        ### Check Available Accelerators
        \`\`\`bash
        /opt/homebrew/bin/qemu-system-x86_64 -accel help
        \`\`\`
        
        ## Files in this Release
        $(ls -la release-assets/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}')
        EOF
        
        # Store the release tag for the next step
        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: qemu-3dfx-homebrew-${{ github.run_number }}
        name: QEMU 3dfx Homebrew Package ${{ github.run_number }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
