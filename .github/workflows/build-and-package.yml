name: Build and Package QEMU 3dfx

on:
  push:
    branches: [ master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean
      target_arch:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
        - arm64
        - x86_64
        - universal

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build:
    name: Build QEMU 3dfx (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
        include:
          - arch: arm64
            runner_arch: arm64
          - arch: x86_64
            runner_arch: x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for commit tracking
        
    - name: Set up environment
      run: |
        echo "BUILD_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "RUNNER_ARCH=${{ matrix.runner_arch }}" >> $GITHUB_ENV
        
        # Generate commit-based identifier
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        echo "BUILD_IDENTIFIER=qemu-3dfx-macos@${COMMIT_SHORT}" >> $GITHUB_ENV
        
        # Set build timestamp
        BUILD_DATE=$(date +%Y%m%d)
        echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
        
    - name: Install build dependencies
      run: |
        # Install Xcode command line tools dependencies
        xcode-select --install 2>/dev/null || true
        
        # Install Homebrew dependencies
        # Core Build Tools
        brew install git wget cmake ninja meson pkg-config
        brew install glib pixman libepoxy gettext libffi python@3.12
        
        # SDL and Gaming Dependencies (essential for DOSBox-style gaming)
        brew install sdl2 sdl2_image sdl2_net sdl2_sound
        brew install sdl12-compat mt32emu
        
    - name: Build QEMU 3dfx
      run: |
        chmod +x scripts/build-qemu-3dfx.sh
        
        # Set commit identity for the sign_commit script
        export QEMU_3DFX_COMMIT="${COMMIT_SHORT}"
        
        # Run the build (builds all targets: i386, x86_64, aarch64)
        ./scripts/build-qemu-3dfx.sh build
        
    - name: Verify build
      run: |
        # Test that QEMU binaries were built successfully
        QEMU_BUILD_DIR="build/qemu-9.2.2/build"
        
        if [ -f "${QEMU_BUILD_DIR}/qemu-system-i386" ]; then
          echo "✅ qemu-system-i386 built successfully"
          ${QEMU_BUILD_DIR}/qemu-system-i386 --version
        else
          echo "❌ qemu-system-i386 not found"
          exit 1
        fi
        
        if [ -f "${QEMU_BUILD_DIR}/qemu-system-x86_64" ]; then
          echo "✅ qemu-system-x86_64 built successfully"
          ${QEMU_BUILD_DIR}/qemu-system-x86_64 --version
        else
          echo "❌ qemu-system-x86_64 not found"
          exit 1
        fi
        
    - name: Test 3dfx device availability
      run: |
        QEMU_BUILD_DIR="build/qemu-9.2.2/build"
        
        echo "=== Testing device availability ==="
        ${QEMU_BUILD_DIR}/qemu-system-i386 -device help | grep -i "3dfx\|glide\|voodoo" || {
          echo "ℹ️ 3dfx device may require specific parameters"
          echo "Testing with voodoo parameter..."
          ${QEMU_BUILD_DIR}/qemu-system-i386 -device 3dfx,help 2>/dev/null || true
        }
        
    - name: Create staging directory
      run: |
        STAGE_DIR="staging/qemu-3dfx-${BUILD_DATE}-${COMMIT_SHORT}-darwin-${{ matrix.arch }}"
        mkdir -p "${STAGE_DIR}/bin"
        mkdir -p "${STAGE_DIR}/lib"
        mkdir -p "${STAGE_DIR}/share"
        mkdir -p "${STAGE_DIR}/sign"
        
        echo "STAGE_DIR=${STAGE_DIR}" >> $GITHUB_ENV
        
    - name: Package binaries
      run: |
        QEMU_BUILD_DIR="build/qemu-9.2.2/build"
        
        # Copy main QEMU binaries
        cp "${QEMU_BUILD_DIR}/qemu-system-i386" "${STAGE_DIR}/bin/"
        cp "${QEMU_BUILD_DIR}/qemu-system-x86_64" "${STAGE_DIR}/bin/"
        cp "${QEMU_BUILD_DIR}/qemu-img" "${STAGE_DIR}/bin/"
        
        # Copy architecture-specific binary if built
        if [ -f "${QEMU_BUILD_DIR}/qemu-system-aarch64" ]; then
          cp "${QEMU_BUILD_DIR}/qemu-system-aarch64" "${STAGE_DIR}/bin/"
        fi
        
        # Copy libraries (look in multiple possible locations)
        LIB_PATHS=(
          "build/virglrenderer-install/lib"
          "${QEMU_BUILD_DIR}"
          "/opt/homebrew/lib"
          "/usr/local/lib"
        )
        
        for lib_path in "${LIB_PATHS[@]}"; do
          if [ -d "$lib_path" ]; then
            find "$lib_path" -name "libglide*.dylib" -exec cp {} "${STAGE_DIR}/lib/" \; 2>/dev/null || true
            find "$lib_path" -name "libvirglrenderer*.dylib" -exec cp {} "${STAGE_DIR}/lib/" \; 2>/dev/null || true
            find "$lib_path" -name "libspice-server*.dylib" -exec cp {} "${STAGE_DIR}/lib/" \; 2>/dev/null || true
          fi
        done
        
        # Copy signing script and resources
        cp scripts/qemu.sign "${STAGE_DIR}/sign/"
        
        # Create qemu.rsrc if it doesn't exist (placeholder)
        if [ ! -f "${STAGE_DIR}/sign/qemu.rsrc" ]; then
          touch "${STAGE_DIR}/sign/qemu.rsrc"
        fi
        
        # Update signing script with current commit
        sed -i '' "s/qemu-3dfx-macos@[a-f0-9]*/qemu-3dfx-macos@${COMMIT_SHORT}/g" "${STAGE_DIR}/sign/qemu.sign"
        
    - name: Create distribution tarball
      run: |
        cd staging
        
        TARBALL_NAME="qemu-9.2.2-3dfx-${COMMIT_SHORT}-darwin-${{ matrix.arch }}.tar.zst"
        
        # Create compressed tarball
        tar -cf - "qemu-3dfx-${BUILD_DATE}-${COMMIT_SHORT}-darwin-${{ matrix.arch }}" | zstd -19 > "${TARBALL_NAME}"
        
        echo "TARBALL_NAME=${TARBALL_NAME}" >> $GITHUB_ENV
        echo "TARBALL_PATH=staging/${TARBALL_NAME}" >> $GITHUB_ENV
        
        # Generate checksum
        shasum -a 256 "${TARBALL_NAME}" > "${TARBALL_NAME}.sha256"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-3dfx-${{ matrix.arch }}-${{ github.sha }}
        path: |
          staging/*.tar.zst
          staging/*.sha256
        retention-days: 30
        
    - name: Upload staging directory for testing
      uses: actions/upload-artifact@v4
      with:
        name: qemu-3dfx-staging-${{ matrix.arch }}-${{ github.sha }}
        path: staging/
        retention-days: 7

  test-installation:
    name: Test Installation (${{ matrix.arch }})
    runs-on: macos-latest
    needs: build
    strategy:
      matrix:
        arch: [arm64, x86_64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set environment
      run: |
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: qemu-3dfx-${{ matrix.arch }}-${{ github.sha }}
        path: artifacts/
        
    - name: Install Xcode tools for signing
      run: |
        # Install required tools for code signing
        brew install --cask xquartz || true  # For X11 tools
        
    - name: Test tarball extraction
      run: |
        cd artifacts
        
        # Find the tarball
        TARBALL=$(ls qemu-9.2.2-3dfx-*.tar.zst)
        echo "Testing tarball: ${TARBALL}"
        
        # Verify checksum
        shasum -a 256 -c "${TARBALL}.sha256"
        
        # Extract to a test directory (not system-wide)
        mkdir -p test-install
        cd test-install
        
        # Extract tarball
        tar --zstd -xf "../${TARBALL}"
        
        # Verify extraction
        EXTRACTED_DIR=$(ls -d qemu-3dfx-*)
        echo "Extracted directory: ${EXTRACTED_DIR}"
        
        # Test that binaries exist
        ls -la "${EXTRACTED_DIR}/bin/"
        ls -la "${EXTRACTED_DIR}/lib/"
        ls -la "${EXTRACTED_DIR}/sign/"
        
    - name: Test signing script dependencies
      run: |
        cd artifacts/test-install/qemu-3dfx-*
        
        # Check if signing dependencies are available
        echo "=== Checking signing dependencies ==="
        
        # Test signing script (dry run)
        cd sign
        bash -n ./scripts/qemu.sign  # Syntax check
        
        echo "✅ Signing script syntax is valid"

  create-release:
    name: Create Release
    runs-on: macos-latest
    needs: [build, test-installation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set environment
      run: |
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
        if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=v$(date +%Y%m%d)-${COMMIT_SHORT}" >> $GITHUB_ENV
        fi
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Collect all tarballs and checksums
        find all-artifacts -name "*.tar.zst" -exec cp {} release-assets/ \;
        find all-artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        
        ls -la release-assets/
        
    - name: Generate release notes
      run: |
        cat > release-notes.md << EOF
        # QEMU 3dfx Release ${RELEASE_TAG}
        
        This release includes QEMU 9.2.2 with 3dfx Glide and Mesa GL pass-through support.
        
        ## Build Information
        - **Commit**: ${COMMIT_SHORT}
        - **Build Date**: $(date +%Y-%m-%d)
        - **QEMU Version**: 9.2.2
        
        ## Supported Architectures
        - macOS ARM64 (Apple Silicon)
        - macOS x86_64 (Intel)
        
        ## Installation Instructions
        
        1. Download the appropriate tarball for your architecture
        2. Verify the checksum: \`shasum -a 256 -c <tarball>.sha256\`
        3. Extract with sudo: \`sudo tar --zstd -xf <tarball> -C /\`
        4. Sign the binaries: \`cd \$(brew --prefix)/sign && bash ./qemu.sign\`
        
        ## Usage Examples
        
        ### 3dfx Glide Support
        \`\`\`bash
        qemu-system-i386 \\
          -machine pc-i440fx-2.1 \\
          -cpu pentium2 \\
          -m 128 \\
          -device 3dfx,voodoo=voodoo2 \\
          -hda dos.img
        \`\`\`
        
        ### Mesa OpenGL Support
        \`\`\`bash
        qemu-system-x86_64 \\
          -enable-hvf \\
          -m 2048 \\
          -device virtio-vga-gl \\
          -display sdl,gl=on \\
          -hda windows.img
        \`\`\`
        
        ## Files in this Release
        $(ls -la release-assets/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}')
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: QEMU 3dfx ${{ env.RELEASE_TAG }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
